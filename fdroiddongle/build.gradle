apply plugin: 'com.android.application'
apply plugin: 'witness'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath files('libs/gradle-witness.jar')
    }
}

android {
    compileSdkVersion 24

    signingConfigs {
        release {
            keyAlias 'fdroid release'
            keyPassword 'fdroidpass'
            storeFile file('/Users/mt2xcon/Iris Android Key Store/fdroid.jks')
            storePassword 'fdroidpass'
        }
    }

    defaultConfig {
        applicationId "fdroidclient.iris.com.fdroiddongle"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        signingConfig signingConfigs.release
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }



    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
    }
}

dependencies {
    compile project(':app')
    compile('ch.acra:acra:4.9.1') {
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
    }
    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:support-annotations:24.2.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.google.zxing:core:3.2.1'
    compile 'eu.chainfire:libsuperuser:1.0.0.201602271131'
    compile 'cc.mvdan.accesspoint:library:0.2.0'
    compile 'info.guardianproject.netcipher:netcipher:2.0.0-alpha1'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-net:commons-net:3.5'
    compile 'org.openhab.jmdns:jmdns:3.4.2'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:0.23.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.2'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support:support-annotations:24.2.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    //Firebase
    compile 'com.google.firebase:firebase-core:9.2.0'
    compile 'com.google.firebase:firebase-messaging:9.2.0'
}


repositories {
    jcenter()
    google()
}

def publish = project.tasks.create("publishReleasefdroiddongle")
publish.description "Copies release apk to custom directory"
android.applicationVariants.all { variant ->
    if (variant.buildType.name.equals("release")) {
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                def task = project.tasks.create("copyAndRename${variant.name}Apk", Copy)

                def outputFile = output.outputFile
                println "Creating " + rootProject.name + "-${versionName}.apk" + " from " + project.name + "-${variant.name}.apk"
//                def fileName = outputFile.name.replace(project.name + "-${variant.name}.apk", rootProject.name +"-${versionName}.apk")
                def fileName = outputFile.name.replace("-${variant.name}.apk", "-${versionName}.apk")
//                output.outputFileName = new File(outputFile.parent, fileName)
                output.outputFileName = new File("./../../../../../build/", fileName)

                println "Copying " + rootProject.name + "-${versionName}.apk" + " to apk directory..."
                task.from(output.outputFile)
                task.into(buildDir.parent + "/../apk")
                println "Done"

                task.dependsOn variant.assemble
                publish.dependsOn task
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
/*
android.applicationVariants.all { variant ->

    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "$name $version API"
        description "Generates Javadoc for F-Droid."
        source = variant.javaCompile.source

        def sdkDir
        Properties properties = new Properties()
        File localProps = project.rootProject.file('local.properties')
        if (localProps.exists()) {
            properties.load(localProps.newDataInputStream())
            sdkDir = properties.getProperty('sdk.dir')
        } else {
            sdkDir = System.getenv('ANDROID_HOME')
        }
        if (!sdkDir) {
            throw new ProjectConfigurationException("Cannot find android sdk. Make sure sdk.dir is defined in local.properties or the environment variable ANDROID_HOME is set.", null)
        }

        ext.androidJar = "${sdkDir}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**//*
BuildConfig.java'
        exclude '**//*
R.java'
    }
}
*/
